#!/bin/bash

# This script ensures the repository is correctly set up.

# Run this from in the repository root.

# Requires: git (built with version 2.15.1. Ymmv with other versions)
#           uniq
#           wc

set -eo pipefail

# First, start using the included git config. Right now, this just sets the username and email.
git config --local include.path ../.gitconfig

function http_remotes() {
    printf "Configuring remotes...\n"
    for rmt in $(git remote); do
        git remote remove "$rmt"
    done
    git remote add bitbucket https://erda0@bitbucket.org/erda0/sync_git.git
    git remote add gitlab https://erda@gitlab.com/Erda/sync_git.git
    git remote add github https://erda0@github.com/Erda0/sync_git.git
    git config --unset --local core.sshCommand || true
    printf "    Done.\n"
}

function ssh_remotes() {
    printf "Your public ssh key is:\n\n"
    cat ./ssh_key.pub
    printf "\nPlease make sure this is authorized with the remote hosts before proceding.\n"
    read -p "Press ENTER to continue."

    printf "Configuring remotes...\n"
    for rmt in $(git remote); do
        git remote remove "$rmt"
    done
    git remote add bitbucket git@bitbucket.org:erda0/sync_git.git
    git remote add gitlab git@gitlab.com:Erda/sync_git.git
    git remote add github git@github.com:Erda0/sync_git.git
    git config --local core.sshCommand "ssh -i \"$PWD/ssh_key\""
    printf "    Done.\n"
}

if ! [[ -e ./ssh_key && -e ./ssh_key.pub ]]; then
    printf "No ssh key detected, do you want to set one up?\n"
    select result in Yes No; do
        case $result in
            No ) http_remotes; break;;
            Yes ) rm -f ./ssh_key ./ssh_key.pub
                  ssh-keygen -t rsa -b 4096 -f ./ssh_key -C "sync_git key"
                  printf "SSH keys generated!\n"
                  ssh_remotes
                  break;;
        esac
    done
else
    ssh_remotes
fi

./verify_remote

./umount

branch=`git rev-parse --abbrev-ref HEAD`
printf "Synchronizing...\n"
for rmt in $(git remote); do
    git pull "$rmt" "$branch"
    break
done
printf "    Done.\n"

./mount

printf "You should be good to go!\n"
